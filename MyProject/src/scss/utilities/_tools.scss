@use "sass:math";

/////////////////////////////////////////
// Functions
/////////////////////////////////////////

// Fetch a value form a nested map
@function map-get-nested($map, $key1, $key2) {
	$map2: map-get($map, $key1);
	@return map-get($map2, $key2);
}

// remove css units and return as number
@function strip-unit($number) {
	@if type-of($number) == "number" and not unitless($number) {
		@return math.div($number, ($number * 0 + 1));
	}
	@return $number;
}

// Check if a css value is a valid unit type
@function is-length($value) {
	@return is-number($value) and
		index(
			"px" "ch" "%" "em" "ex" "ch" "rem" "vw" "vh" "vmin" "vmax",
			unit($value)
		)
		!= null;
}

// Convert px to rem (assumes html is set to 10px)
@function toRem($px) {
	@return math.div(strip-unit($px), 10) + rem;
}

// Calculate % padding used to create ratios
@function ratioPad($x, $y) {
	@return math.div($y, math.div($x, 100%));
}

//:::::::::::::::::::::::::::::::::::::::
// Use a bool to return a css "!important" declaration
//:::::::::::::::::::::::::::::::::::::::
@function important($important) {
	$imp: "";
	@if ($important) {
		$imp: "!important";
	}
	@return $imp;
}
